{"version":3,"sources":["components/tile/tile.tsx","components/timer-bar/timer-bar.tsx","components/toaster/toaster.tsx","util.tsx","assets/tile-icons/0.svg","assets/tile-icons/1.svg","assets/tile-icons/2.svg","assets/tile-icons/3.svg","assets/tile-icons/4.svg","assets/tile-icons/5.svg","assets/tile-icons/6.svg","assets/tile-icons/7.svg","components/board/board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Tile","iconPath","onClick","shown","wrong","className","alt","src","TimerBar","duration","animationString","style","animation","Toaster","title","bodyText","hideAfter","useState","hiddenBasedOnDuration","setHiddenBasedOnDuration","useEffect","setTimeout","TILE_ICONS","Board","boardSize","initialTileIndexes","i","push","tileIndexes","setTileIndexes","isFirstGame","setIsFirstGame","attempts","setAttempts","points","setPoints","wins","setWins","hasWon","setHasWon","hasLost","setHasLost","startGameBtnLocked","setStartGameBtnLocked","shownTiles","setShownTiles","curIconPair","setCurIconPair","wrongIndexes","setWrongIndexes","allShown","setAllShown","gameStarted","setGameStarted","gameLocked","setGameLocked","length","w","registerWrongChoice","indexA","indexB","newTilesShown","forEach","tile","index","divisors","num","lo","hi","divA","NaN","divB","product","console","log","a","b","getClosestDivisors","gridColString","repeat","Math","round","max","isMobile","window","innerWidth","boardBaseSize","widthFactor","min","disabled","shuffledArray","array","randomIndex","currentIndex","floor","random","shuffle","REVEAL_DURATION","gridTemplateColumns","width","height","map","find","tileIndex","shownTile","undefined","selectedIcon","isWrongChoice","previousSelection","icon","onTileClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6459afb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./tile.scss\";\r\n\r\ntype TileProps = {\r\n  iconPath: string;\r\n  onClick: () => void;\r\n  shown: boolean;\r\n  wrong: boolean;\r\n};\r\n\r\nfunction Tile({ iconPath, onClick, shown, wrong }: TileProps) {\r\n  return (\r\n    <div\r\n      onClick={onClick}\r\n      className={\"tile\" + (shown ? \" shown\" : \"\") + (wrong ? \" wrong\" : \"\")}\r\n    >\r\n      <div className={\"tile-icon-wrapper\"}>\r\n        {shown ? (\r\n          <img alt=\"tile-icon\" className={\"tile-icon\"} src={iconPath} />\r\n        ) : (\r\n          <div className=\"tile-icon spacer\" />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport \"./timer-bar.scss\";\r\n\r\ntype TimerBarProps = {\r\n  duration: number;\r\n};\r\n\r\nfunction TimerBar({ duration }: TimerBarProps) {\r\n  const animationString = `roundtime calc(${duration} * 1s) linear forwards`;\r\n\r\n  return (\r\n    <div\r\n      className=\"timer-bar\"\r\n      data-style=\"smooth\"\r\n      style={{ animation: animationString }}\r\n    >\r\n      <div className=\"inner\"></div>\r\n    </div>\r\n  );\r\n}\r\nexport default TimerBar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./toaster.scss\";\r\n\r\ntype ToasterProps = {\r\n  title: string;\r\n  bodyText: string;\r\n  shown: boolean;\r\n  hideAfter: number;\r\n};\r\n\r\nfunction Toaster({ title, bodyText, shown, hideAfter }: ToasterProps) {\r\n  const [hiddenBasedOnDuration, setHiddenBasedOnDuration] =\r\n    useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (shown) {\r\n      setTimeout(() => setHiddenBasedOnDuration(true), hideAfter);\r\n    } else {\r\n      setHiddenBasedOnDuration(false);\r\n    }\r\n  }, [shown]);\r\n\r\n  return shown && !hiddenBasedOnDuration ? (\r\n    <div className=\"toaster\">\r\n      <div className=\"toaster-contents animate__animated animate__slideInUp\">\r\n        <div className=\"title\">{title}</div>\r\n        <div className=\"body\">{bodyText}</div>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div className=\"toaster-empty\"></div>\r\n  );\r\n}\r\nexport default Toaster;\r\n","// This is not great, and is kind of tedious to maintain.\r\n// There are ways to dynamically fetch a list of icons (such as using WebPack's require.context), but I did not want to spend time there.\r\nimport FirstIcon from \"./assets/tile-icons/0.svg\";\r\nimport SecondIcon from \"./assets/tile-icons/1.svg\";\r\nimport ThirdIcon from \"./assets/tile-icons/2.svg\";\r\nimport FourthIcon from \"./assets/tile-icons/3.svg\";\r\nimport FifthIcon from \"./assets/tile-icons/4.svg\";\r\nimport SixthIcon from \"./assets/tile-icons/5.svg\";\r\nimport SeventhIcon from \"./assets/tile-icons/6.svg\";\r\nimport EighthIcon from \"./assets/tile-icons/7.svg\";\r\n\r\nexport const TILE_ICONS = [\r\n  FirstIcon,\r\n  SecondIcon,\r\n  ThirdIcon,\r\n  FourthIcon,\r\n  FifthIcon,\r\n  SixthIcon,\r\n  SeventhIcon,\r\n  EighthIcon,\r\n];\r\n\r\n// Knuth Shuffle\r\nexport const shuffle = (array: Array<any>) => {\r\n  var currentIndex = array.length,\r\n    randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex],\r\n      array[currentIndex],\r\n    ];\r\n  }\r\n\r\n  return array;\r\n};\r\n// Get the two closest divisors of a given number.\r\n// For example, given 12, return 3 and 4.\r\nexport const getClosestDivisors = (num: number): { a: number; b: number } => {\r\n  let lo = 1;\r\n  let hi = num;\r\n  let divA = NaN;\r\n  let divB = NaN;\r\n  while (hi >= lo) {\r\n    const product = lo * hi;\r\n    if (product === num) {\r\n      divA = lo;\r\n      divB = hi;\r\n      // When we hit a match, try next from hi and down\r\n      hi--;\r\n    } else if (product > num) {\r\n      // Too big, reduce hi\r\n      hi--;\r\n    } else {\r\n      // Too small, raise lo\r\n      lo++;\r\n    }\r\n  }\r\n  console.log(num, divA, divB);\r\n  return { a: divA, b: divB };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/0.1574e2c5.svg\";","export default __webpack_public_path__ + \"static/media/1.54796f59.svg\";","export default __webpack_public_path__ + \"static/media/2.e3fed5bf.svg\";","export default __webpack_public_path__ + \"static/media/3.e213b0fd.svg\";","export default __webpack_public_path__ + \"static/media/4.e6a53072.svg\";","export default __webpack_public_path__ + \"static/media/5.0825e0a1.svg\";","export default __webpack_public_path__ + \"static/media/6.f13d0352.svg\";","export default __webpack_public_path__ + \"static/media/7.b6857c65.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport \"./board.scss\";\r\nimport Tile from \"../tile/tile\";\r\nimport TimerBar from \"../timer-bar/timer-bar\";\r\nimport Toaster from \"../toaster/toaster\";\r\nimport { getClosestDivisors, shuffle, TILE_ICONS } from \"../../util\";\r\n\r\ntype BoardProps = {\r\n  boardSize: number;\r\n};\r\n\r\nfunction Board({ boardSize }: BoardProps) {\r\n  // *** CONFIG VARS ***\r\n\r\n  // Variable for toggling shuffling on/off. Having a non-shuffled list is useful for debugging.\r\n  const DO_SHUFFLE_TILES = true;\r\n  // Duration a new board of tiles is revealed for\r\n  const REVEAL_DURATION = 5000;\r\n  // Time before a wrongful selection dissapears\r\n  const WRONG_SELECTION_VIEW_DURATION = 1500;\r\n  // Discussion Point: Should a correct selection cost an attempt?\r\n  const USE_ATTEMPT_ON_SUCCESS = false;\r\n  // Discussion Point: Should points reset when starting a new game?\r\n  const RESET_POINTS_ON_GAME_END = false;\r\n  // *** END CONFIG VARS ***\r\n\r\n  // Initial indexes for distribution of tiles. This will later be randomized for games to be... Well, playable.\r\n  const initialTileIndexes: number[] = [];\r\n\r\n  for (let i = 0; i < boardSize * 2; i++) {\r\n    initialTileIndexes.push(i);\r\n  }\r\n  const [tileIndexes, setTileIndexes] = useState<number[]>(initialTileIndexes);\r\n  const [isFirstGame, setIsFirstGame] = useState<boolean>(true);\r\n  // Discussion Point: How do attempts grow with number of pairs/boardsize?\r\n  const [attempts, setAttempts] = useState<number>(boardSize);\r\n  const [points, setPoints] = useState<number>(0);\r\n  const [wins, setWins] = useState<number>(0);\r\n  const [hasWon, setHasWon] = useState<boolean>(false);\r\n  const [hasLost, setHasLost] = useState<boolean>(false);\r\n  const [startGameBtnLocked, setStartGameBtnLocked] = useState<boolean>(false);\r\n\r\n  const [shownTiles, setShownTiles] = useState<\r\n    { index: number; icon: string }[]\r\n  >([]);\r\n  const [curIconPair, setCurIconPair] = useState<string>(\"\");\r\n  //List holding indexes when a wrong selection is made\r\n  const [wrongIndexes, setWrongIndexes] = useState<number[]>([]);\r\n\r\n  const [allShown, setAllShown] = useState<boolean>(false);\r\n  const [gameStarted, setGameStarted] = useState<boolean>(false);\r\n  // Locks click handlers. Useful when making wrong selections etc.\r\n  const [gameLocked, setGameLocked] = useState<boolean>(false);\r\n\r\n  // Side effect: When shown tiles are updated, check if we have won\r\n  useEffect(() => {\r\n    // We have won if all tiles are shown\r\n    if (shownTiles.length === boardSize * 2) {\r\n      setWins((w) => w + 1);\r\n      setHasWon(true);\r\n      setGameStarted(false);\r\n    }\r\n  }, [shownTiles]);\r\n\r\n  useEffect(() => {\r\n    // No more attempts, and haven't won\r\n    if (attempts <= 0 && shownTiles.length !== boardSize * 2) {\r\n      setHasLost(true);\r\n      setGameStarted(false);\r\n    }\r\n  }, [attempts]);\r\n\r\n  const clearForNewGame = () => {\r\n    setWrongIndexes([]);\r\n    setShownTiles([]);\r\n    if (RESET_POINTS_ON_GAME_END) {\r\n      setPoints(0);\r\n    }\r\n    setAttempts(6);\r\n    setHasWon(false);\r\n    setHasLost(false);\r\n  };\r\n\r\n  const startGame = () => {\r\n    if (!startGameBtnLocked) {\r\n      setStartGameBtnLocked(true);\r\n      if (DO_SHUFFLE_TILES) {\r\n        // Shuffle the tiles for actual games\r\n        const shuffledArray = shuffle(tileIndexes);\r\n        setTileIndexes(shuffledArray);\r\n      }\r\n      if (isFirstGame) {\r\n        setIsFirstGame(false);\r\n      }\r\n      clearForNewGame();\r\n      setGameStarted(true);\r\n      setAllShown(true);\r\n\r\n      setTimeout(() => {\r\n        setAllShown(false);\r\n        setStartGameBtnLocked(false);\r\n      }, REVEAL_DURATION);\r\n    }\r\n  };\r\n\r\n  const onTileClick = (tileIndex: number, selectedIcon: string) => {\r\n    let isWrongChoice = false;\r\n    // If CurIconPair was not empty, we are doing the 2nd selection\r\n    if (curIconPair !== \"\") {\r\n      isWrongChoice = selectedIcon !== curIconPair;\r\n      if (isWrongChoice) {\r\n        // Lower attempts when making a mistake\r\n        setAttempts(attempts - 1);\r\n      } else {\r\n        // Right choice! Add points\r\n        setPoints(points + 10);\r\n        if (USE_ATTEMPT_ON_SUCCESS) {\r\n          // Lower attempts if we want to spend attempts on correct choices\r\n          setAttempts(attempts - 1);\r\n        }\r\n      }\r\n      // Clear after 2 selections\r\n      setCurIconPair(\"\");\r\n    } else {\r\n      setCurIconPair(selectedIcon);\r\n    }\r\n    // Always show new tiles, even if we get it wrong\r\n    const previousSelection = shownTiles[shownTiles.length - 1];\r\n    const newTilesShown = [...shownTiles];\r\n    newTilesShown.push({ index: tileIndex, icon: selectedIcon });\r\n    setShownTiles(newTilesShown);\r\n\r\n    if (isWrongChoice) {\r\n      registerWrongChoice(tileIndex, previousSelection.index);\r\n    }\r\n  };\r\n\r\n  const registerWrongChoice = (indexA: number, indexB: number) => {\r\n    // Set wrong indexes to show red color\r\n    setWrongIndexes([indexA, indexB]);\r\n    setGameLocked(true);\r\n\r\n    const newTilesShown: { index: number; icon: string }[] = [];\r\n    shownTiles.forEach((tile) => {\r\n      // Only carry over indexes that were not the two wrong choices\r\n      if (tile.index !== indexA && tile.index !== indexB) {\r\n        newTilesShown.push(tile);\r\n      }\r\n    });\r\n    // Remove wrong indexes after WRONG_SELECTION_VIEW_DURATION ms\r\n    setTimeout(() => {\r\n      setShownTiles(newTilesShown);\r\n      setWrongIndexes([]);\r\n      setGameLocked(false);\r\n    }, WRONG_SELECTION_VIEW_DURATION);\r\n  };\r\n\r\n  // Get closest divisors of boardsize (ie 12 = 3 x 4)\r\n  const divisors = getClosestDivisors(boardSize * 2);\r\n\r\n  // Prefer wider layouts (ie 4 x 3 over 4 x 3)\r\n  const gridColString = \"1fr \".repeat(\r\n    Math.round(Math.max(divisors.a, divisors.b))\r\n  );\r\n\r\n  const isMobile = window.innerWidth <= 800;\r\n\r\n  // 80vw for mobile, 60vh for desktop\r\n  const boardBaseSize = isMobile ? 80 : 60;\r\n\r\n  const widthFactor =\r\n    Math.max(divisors.a, divisors.b) / Math.min(divisors.a, divisors.b);\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      <Toaster\r\n        shown={hasWon}\r\n        title=\"Good job, you win!\"\r\n        bodyText=\"Your next game is ready!\"\r\n        hideAfter={5000}\r\n      />\r\n      <Toaster\r\n        shown={hasLost}\r\n        title=\"Aww, you lost!\"\r\n        bodyText=\"You ran out of attempts. Click New Game to play again\"\r\n        hideAfter={5000}\r\n      />\r\n      <div className={\"game-stats\"}>\r\n        <div className=\"attempts-text\">\r\n          <span className=\"stats-text\">Attempts: </span>\r\n          {attempts}\r\n        </div>\r\n        <div className=\"attempts-text\">\r\n          <span className=\"stats-text\">Points: </span>\r\n          {points}\r\n        </div>\r\n        <div className=\"attempts-text\">\r\n          <span className=\"stats-text\">Wins: </span>\r\n          {wins}\r\n        </div>\r\n      </div>\r\n\r\n      <button\r\n        disabled={startGameBtnLocked}\r\n        onClick={startGame}\r\n        className={\r\n          \"begin-btn animate__animated \" +\r\n          (startGameBtnLocked ? \" disabled\" : \"\") +\r\n          (isFirstGame && !startGameBtnLocked\r\n            ? \"animate__infinite animate__pulse\"\r\n            : \"\")\r\n        }\r\n      >\r\n        {isFirstGame ? \"Begin\" : \"New Game\"}\r\n      </button>\r\n\r\n      <div className=\"timer-section\">\r\n        {allShown ? (\r\n          <div className=\"timer-running-section\">\r\n            <div className=\"timer-text\">Tiles Revealed!</div>\r\n            <TimerBar duration={REVEAL_DURATION / 1000}></TimerBar>\r\n          </div>\r\n        ) : (\r\n          <div className={\"timer-bar-spacer\"} />\r\n        )}\r\n      </div>\r\n\r\n      <div\r\n        style={{\r\n          gridTemplateColumns: gridColString,\r\n          width: boardBaseSize * widthFactor + (isMobile ? \"vw\" : \"vh\"),\r\n          height: boardBaseSize + (isMobile ? \"vw\" : \"vh\"),\r\n        }}\r\n        className={\"board-tiles\"}\r\n      >\r\n        {tileIndexes.map((index) => (\r\n          <Tile\r\n            key={\"tile\" + index}\r\n            wrong={\r\n              wrongIndexes.find((tileIndex) => tileIndex === index) != null\r\n            }\r\n            iconPath={TILE_ICONS[Math.floor(index / 2)]}\r\n            onClick={() =>\r\n              // Only fire onClicks once the game has started, and all tiles are done being shown\r\n              !gameLocked &&\r\n              gameStarted &&\r\n              !allShown &&\r\n              // Don't fire clicks on tiles that are already shown\r\n              shownTiles.find((shownTile) => shownTile.index === index) == null\r\n                ? onTileClick(index, TILE_ICONS[Math.floor(index / 2)])\r\n                : undefined\r\n            }\r\n            shown={\r\n              allShown ||\r\n              shownTiles.find((shownTile) => shownTile.index === index) != null\r\n            }\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Board;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport Board from \"./components/board/board\";\n\nfunction App() {\n  // Number of different icon pairs\n  const numPairs = 8;\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"welcome-section\">Welcome to the Memory Game!</div>\n      </header>\n      <div className=\"body\">\n        <Board boardSize={numPairs}></Board>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}